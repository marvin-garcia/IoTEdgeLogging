{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "environmentHashId": {
      "type": "string",
      "metadata": {
        "description": "Unique alphanumeric id to assign to multiple resource names."
      }
    },
    "createIoTHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create a new IoT hub."
      }
    },
    "iotHubName": {
      "type": "string",
      "metadata": {
        "description": "Name for IoT Hub resource."
      }
    },
    "iotHubResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "IoT Hub resource group."
      }
    },
    "iotHubServicePolicyName": {
      "type": "string",
      "metadata": {
        "description": "IoT hub policy policy name."
      }
    },
    "iotHubSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "F1",
        "S1",
        "S2",
        "S3"
      ],
      "metadata": {
        "description": "The Azure IoT Hub SKU to use."
      }
    },
    "iotHubCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The Azure IoT Hub SKU capacity to use."
      }
    },
    "iotHubTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Free",
        "Standard"
      ],
      "metadata": {
        "description": "The Azure IoT Hub tier to use."
      }
    },
    "iotHubPartitionCount": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "The Azure IoT Hub default endpoint partition count."
      }
    },
    "iotHubRetentionInDays": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The Azure IoT Hub default message retention in days."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name for the virtual network."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix for the virtual network."
      }
    },
    "edgeSubnetName": {
      "type": "string",
      "defaultValue": "iotedge",
      "metadata": {
        "description": "Name for the IoT edge VM subnet."
      }
    },
    "edgeSubnetAddressRange": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Address range for the IoT edge VM subnet."
      }
    },
    "edgeVmName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "IoT edge virtual machine name."
      }
    },
    "edgeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "IoT edge virtual machine size."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies a username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the username password for the Virtual Machine."
      }
    },
    "dpsSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1"
      ],
      "metadata": {
        "description": "The Azure Device Provisioning service SKU to use."
      }
    },
    "dpsCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The Azure Device Provisioning service capacity."
      }
    },
    "dpsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of Azure IoT Hub for Device Provisioning service."
      }
    },
    "createStorageAccount": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create new storage account to store logs."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Logs storage account name."
      }
    },
    "storageAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Logs storage account resource group."
      }
    },
    "createStorageContainer": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create new storage account container to store logs."
      }
    },
    "storageContainerName": {
      "type": "string",
      "metadata": {
        "description": "Logs storage container name."
      }
    },
    "storageQueueName": {
      "type": "string",
      "metadata": {
        "description": "Logs storage queue name."
      }
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Logs storage account SKU."
      }
    },
    "deviceQuery": {
      "type": "string",
      "defaultValue": "SELECT * FROM devices",
      "metadata": {
        "description": "IoT hub device query to target specific IoT edge devices"
      }
    },
    "createWorkspace": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create a new Log Analytics workspace"
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Log analytics Workspace name."
      }
    },
    "workspaceResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Log analytics Workspace resource group."
      }
    },
    "workspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "metadata": {
        "description": "Log analytics Workspace name"
      }
    },
    "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Function App resource."
      }
    },
    "moduleIdRegex": {
      "type": "string",
      "defaultValue": ".*",
      "metadata": {
        "description": "Regular expression that supplies the IoT edge module name. It can match multiple modules. .NET Regular Expressions format is expected."
      }
    },
    "logsRegex": {
      "type": "string",
      "defaultValue": "\\b(WRN?|ERR?|CRIT?)\\b",
      "metadata": {
        "description": "Regular expression used to filter log lines with content that matches the specified regular expression. .NET Regular Expressions format is expected."
      }
    },
    "logsType": {
      "type": "string",
      "defaultValue": "iotedgemodulelogs",
      "metadata": {
        "description": "A name to group logs by in Log analytics."
      }
    },
    "logsSince": {
      "type": "string",
      "defaultValue": "1h",
      "metadata": {
        "description": "Only retrieve logs since this time, as a duration (1d, 90m, 2 days 3 hours 2 minutes), rfc3339 timestamp, or UNIX timestamp."
      }
    },
    "templateUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/marvin-garcia/IoTEdgeLogging",
      "metadata": {
        "description": "GitHub repo URL"
      }
    },
    "branchName": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "GitHub repo branch name"
      }
    }
  },
  "variables": {
    "edgeVmDnsName": "[concat(parameters('edgeVmName'), '-', parameters('environmentHashId'))]",
    "dpsResourceId": "[resourceId('Microsoft.Devices/provisioningServices', variables('dpsName'))]",
    "dpsName": "[concat('dps-', parameters('environmentHashId'))]",
    "dpsGlobalEndpoint": "[if(startsWith(parameters('location'), 'usgov'), 'global.azure-devices-provisioning.us', if(startsWith(parameters('location'), 'usdod'), 'global.azure-devices-provisioning.us', 'global.azure-devices-provisioning.net'))]",
    "edgePublicIPAddressName": "[concat(parameters('edgeVmName'), '-ip')]",
    "edgeNetworkInterfaceName": "[concat(parameters('edgeVmName'), '-nic')]",
    "edgeNetworkSecurityGroupName": "[concat(parameters('edgeVmName'), '-nsg')]",
    "iotHubDomain": "[if(startsWith(parameters('location'), 'usgov'), '.azure-devices.us', if(startsWith(parameters('location'), 'usdod'), '.azure-devices.us', '.azure-devices.net'))]",
    "iotHubEventsRoute": "events",
    "iotHubOwnerPolicyName": "iothubowner",
    "eventGridTopicName": "[concat('eventgrid-', parameters('environmentHashId'))]",
    "eventGridSubscriptionName": "IoTEdgeLogs",
    "eventGridSubscriptionFilter": "[concat('/blobServices/default/containers/', parameters('storageContainerName'), '/')]",
    "functionAppHostingPlanName": "[concat(parameters('functionAppName'), '-plan')]",
    "functionStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'function')]",
    "functionStorageAccountSku": "Standard_LRS",
    "appInsightsName": "[parameters('functionAppName')]",
    "iotHubId": "[resourceId(parameters('iotHubResourceGroup'), 'Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
    "storageAccountId": "[resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "workspaceId": "[resourceId(parameters('workspaceResourceGroup'), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
  },
  "resources": [
    {
      "comments": "IoT virtual network",
      "condition": "[parameters('createIoTHub')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[parameters('vnetName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('edgeNetworkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('edgeSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('edgeSubnetAddressRange')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('edgeNetworkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "IoT edge VM network security group",
      "condition": "[parameters('createIoTHub')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[variables('edgeNetworkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          // {
          //   "name": "ssh_rule",
          //   "properties": {
          //     "description": "Locks inbound down to ssh default port 22.",
          //     "protocol": "Tcp",
          //     "sourcePortRange": "*",
          //     "destinationPortRange": "22",
          //     "sourceAddressPrefix": "*",
          //     "destinationAddressPrefix": "*",
          //     "access": "Allow",
          //     "priority": 100,
          //     "direction": "Inbound"
          //   }
          // }
        ]
      }
    },
    {
      "comments": "IoT edge VM public IP address",
      "condition": "[parameters('createIoTHub')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('edgePublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('edgeVmDnsName')]"
        }
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "comments": "IoT edge VM network interface",
      "condition": "[parameters('createIoTHub')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[variables('edgeNetworkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('edgePublicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('edgeNetworkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('edgePublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('edgeSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "IoT edge virtual machine",
      "condition": "[parameters('createIoTHub')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-12-01",
      "name": "[parameters('edgeVmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('edgeNetworkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('edgeVmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('edgeVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04.0-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('edgeNetworkInterfaceName'))]"
            }
          ]
        }
      }
      // "plan": {
      //   "name": "ubuntu_1604_edgeruntimeonly",
      //   "publisher": "microsoft_iot_edge",
      //   "product": "iot_edge_vm_ubuntu"
      // }
    },
    {
      "comments": "One time script to configure and onboard the IoT edge virtual machine",
      "condition": "[and(parameters('createIoTHub'), parameters('createIoTHub'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('edgeVmName'), '/', 'scriptextensions')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Scripts/dps-enroll.ps1')]",
            "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Scripts/edge-setup.ps1')]",
            "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Scripts/edge-setup.sh')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('sudo bash edge-setup.sh --idScope \"', reference(variables('dpsResourceId'), providers('Microsoft.Devices', 'ProvisioningServices').apiVersions[0]).idScope, '\" --dpsConnString \"', 'HostName=', variables('dpsName'), '.azure-devices-provisioning.net;SharedAccessKeyName=provisioningserviceowner;SharedAccessKey=', listKeys(variables('dpsResourceId'), providers('Microsoft.Devices', 'ProvisioningServices').apiVersions[0]).value[0].primaryKey, '\"', ' --dpsGlobalEndpoint ', '\"', 'https://', variables('dpsGlobalEndpoint'), '\"')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('edgeVmName'))]",
        "[variables('dpsResourceId')]"
      ]
    },
    {
      "comments": "Logs storage account",
      "condition": "[parameters('createStorageAccount')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageAccountSku')]"
      },
      "properties": {
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
          ],
          "ipRules": [
          ],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "comments": "Log storage account container",
      "condition": "[parameters('createStorageContainer')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageContainerName'))]",
      "apiVersion": "2019-06-01",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ]
    },
    {
      "comments": "Log storage account queue",
      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageQueueName'))]",
      "apiVersion": "2021-01-01",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ]
    },
    {
      "comments": "Azure IoT Hub",
      "condition": "[parameters('createIoTHub')]",
      "apiVersion": "2020-07-10-preview",
      "type": "Microsoft.Devices/Iothubs",
      "name": "[parameters('iotHubName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('iotHubSku')]",
        "tier": "[parameters('iotHubTier')]",
        "capacity": "[parameters('iotHubCapacity')]"
      },
      "dependsOn": [],
      "properties": {
        "location": "[resourceGroup().location]",
        "authorizationPolicies": [
          {
            "keyName": "[variables('iotHubOwnerPolicyName')]",
            "rights": "RegistryWrite,ServiceConnect,DeviceConnect"
          },
          {
            "keyName": "[parameters('iotHubServicePolicyName')]",
            "rights": "ServiceConnect,RegistryRead"
          }
        ],
        "ipFilterRules": [],
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": "[parameters('iotHubRetentionInDays')]",
            "partitionCount": "[parameters('iotHubPartitionCount')]"
          }
        },
        "routing": {
          "endpoints": {
            "serviceBusQueues": [],
            "serviceBusTopics": [],
            "eventHubs": [],
            "storageContainers": []
          },
          "routes": [
            {
              "name": "[variables('iotHubEventsRoute')]",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "events"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ],
            "isEnabled": true
          }
        },
        "messagingEndpoints": {
          "fileNotifications": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "features": "None",
        "minTlsVersion": "1.2"
      }
    },
    {
      "comments": "Azure Device Provisioning service.",
      "condition": "[and(parameters('createIoTHub'), parameters('createIoTHub'))]",
      "type": "Microsoft.Devices/provisioningServices",
      "name": "[variables('dpsName')]",
      "apiVersion": "2018-01-22",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('dpsSku')]",
        "capacity": "[parameters('dpsCapacity')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]"
      ],
      "properties": {
        "iotHubs": [
          {
            "connectionString": "[concat('HostName=', reference(resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))).hostName, ';SharedAccessKeyName=', variables('iotHubOwnerPolicyName'), ';SharedAccessKey=', listKeys(resourceId(parameters('iotHubResourceGroup'), 'Microsoft.Devices/Iothubs/IoTHubKeys', parameters('iotHubName'), variables('iotHubOwnerPolicyName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).primaryKey)]",
            "location": "[parameters('dpsLocation')]",
            "name": "[concat(parameters('iotHubName'), variables('iotHubDomain'))]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2020-10-15-preview",
      "name": "[variables('eventGridTopicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "topicType": "microsoft.storage.storageaccounts",
        "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2020-10-15-preview",
      "name": "[concat(variables('eventGridTopicName'), '/', variables('eventGridSubscriptionName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', variables('eventGridTopicName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "destination": {
          "properties": {
            "resourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
            "queueName": "[parameters('storageQueueName')]"
          },
          "endpointType": "StorageQueue"
        },
        "filter": {
          "subjectBeginsWith": "[variables('eventGridSubscriptionFilter')]",
          "includedEventTypes": [
            "Microsoft.Storage.BlobCreated"
          ]
        },
        "eventDeliverySchema": "EventGridSchema",
        "retryPolicy": {
          "maxDeliveryAttempts": 30,
          "eventTimeToLiveInMinutes": 1440
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionStorageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[variables('functionStorageAccountSku')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionAppHostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[variables('functionAppHostingPlanName')]",
        "computeMode": "Dynamic"
      }
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('appInsightsName')))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('functionAppHostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName'))]"
      ],
      "properties": {
        "name": "[parameters('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionAppHostingPlanName'))]",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').connectionString]"
            },
            {
              "name": "StorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listkeys(variables('storageAccountId'), '2018-11-01').keys[0].value, ';')]"
            },
            {
              "name": "QueueName",
              "value": "[parameters('storageQueueName')]"
            },
            {
              "name": "ContainerName",
              "value": "[parameters('storageContainerName')]"
            },
            {
              "name": "DeviceQuery",
              "value": "[parameters('deviceQuery')]"
            },
            {
              "name": "HubConnectionString",
              "value": "[concat('HostName=', reference(variables('iotHubId')).hostName, ';SharedAccessKeyName=', parameters('iotHubServicePolicyName'), ';SharedAccessKey=', listKeys(resourceId(parameters('iotHubResourceGroup'), 'Microsoft.Devices/Iothubs/IoTHubKeys', parameters('iotHubName'), parameters('iotHubServicePolicyName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).primaryKey)]"
            },
            {
              "name": "LogsContentType",
              "value": "json"
            },
            {
              "name": "LogsEncoding",
              "value": "none"
            },
            {
              "name": "LogsMaxSizeMB",
              "value": "28"
            },
            {
              "name": "LogsIdRegex",
              "value": "[parameters('moduleIdRegex')]"
            },
            {
              "name": "LogsRegex",
              "value": "[parameters('logsRegex')]"
            },
            {
              "name": "LogsSince",
              "value": "[parameters('logsSince')]"
            },
            {
              "name": "LogType",
              "value": "[parameters('logsType')]"
            },
            {
              "name": "WorkspaceApiVersion",
              "value": "2016-04-01"
            },
            {
              "name": "WorkspaceId",
              "value": "[reference(variables('workspaceId'), '2020-10-01').customerId]"
            },
            {
              "name": "WorkspaceKey",
              "value": "[listKeys(variables('workspaceId'), '2020-10-01').primarySharedKey]"
            }
          ]
        }
      },
      "resources": []
    },
    {
      "apiVersion": "2020-10-01",
      "condition": "[parameters('createWorkspace')]",
      "type": "microsoft.operationalinsights/workspaces",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "[parameters('workspaceSku')]"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    }
  ],
  "outputs": {}
}