{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the deployment location."
      }
    },
    "environmentHashId": {
      "type": "string",
      "metadata": {
        "description": "Unique alphanumeric id to assign to multiple resource names."
      }
    },
    "createIoTHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create a new IoT hub."
      }
    },
    "iotHubLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "IoT Hub location."
      }
    },
    "iotHubName": {
      "type": "string",
      "metadata": {
        "description": "Name for IoT Hub resource."
      }
    },
    "iotHubResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "IoT Hub resource group."
      }
    },
    "iotHubServicePolicyName": {
      "type": "string",
      "metadata": {
        "description": "IoT hub policy policy name."
      }
    },
    "iotHubSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "F1",
        "S1",
        "S2",
        "S3"
      ],
      "metadata": {
        "description": "The Azure IoT Hub SKU to use."
      }
    },
    "iotHubCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The Azure IoT Hub SKU capacity to use."
      }
    },
    "iotHubTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Free",
        "Standard"
      ],
      "metadata": {
        "description": "The Azure IoT Hub tier to use."
      }
    },
    "iotHubPartitionCount": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "The Azure IoT Hub default endpoint partition count."
      }
    },
    "iotHubRetentionInDays": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The Azure IoT Hub default message retention in days."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name for the virtual network."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix for the virtual network."
      }
    },
    "edgeSubnetName": {
      "type": "string",
      "defaultValue": "iotedge",
      "metadata": {
        "description": "Name for the IoT edge VM subnet."
      }
    },
    "edgeSubnetAddressRange": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Address range for the IoT edge VM subnet."
      }
    },
    "edgeVmName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "IoT edge virtual machine name."
      }
    },
    "edgeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "IoT edge virtual machine size."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies a username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the username password for the Virtual Machine."
      }
    },
    "dpsSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1"
      ],
      "metadata": {
        "description": "The Azure Device Provisioning service SKU to use."
      }
    },
    "dpsCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The Azure Device Provisioning service capacity."
      }
    },
    "dpsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of Azure IoT Hub for Device Provisioning service."
      }
    },
    "createStorageAccount": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create new storage account to store logs."
      }
    },
    "storageAccountLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Storage account location."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Logs storage account name."
      }
    },
    "storageAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Logs storage account resource group."
      }
    },
    "storageContainerName": {
      "type": "string",
      "metadata": {
        "description": "Logs storage container name."
      }
    },
    "storageQueueName": {
      "type": "string",
      "metadata": {
        "description": "Logs storage queue name."
      }
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Logs storage account SKU."
      }
    },
    "createEventGridSystemTopic": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create new system event grid topic for the logs storage account."
      }
    },
    "eventGridSystemTopicName": {
      "type": "string",
      "metadata": {
        "description": "Event grid system topic name for the logs storage account."
      }
    },
    "deviceQuery": {
      "type": "string",
      "defaultValue": "SELECT * FROM devices",
      "metadata": {
        "description": "IoT hub device query to target specific IoT edge devices."
      }
    },
    "createWorkspace": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create a new Log Analytics workspace."
      }
    },
    "workspaceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Log analytics workspace location."
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Log analytics Workspace name."
      }
    },
    "workspaceResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Log analytics Workspace resource group."
      }
    },
    "workspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "metadata": {
        "description": "Log analytics Workspace name."
      }
    },
    "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Function App resource."
      }
    },
    "moduleIdRegex": {
      "type": "string",
      "defaultValue": ".*",
      "metadata": {
        "description": "Regular expression that supplies the IoT edge module name. It can match multiple modules. .NET Regular Expressions format is expected."
      }
    },
    "logsRegex": {
      "type": "string",
      "defaultValue": "\\b(WRN?|ERR?|CRIT?)\\b",
      "metadata": {
        "description": "Regular expression used to filter log lines with content that matches the specified regular expression. .NET Regular Expressions format is expected."
      }
    },
    "logsType": {
      "type": "string",
      "defaultValue": "iotedgemodulelogs",
      "metadata": {
        "description": "A name to group logs by in Log analytics."
      }
    },
    "logsSince": {
      "type": "string",
      "defaultValue": "1h",
      "metadata": {
        "description": "Only retrieve logs since this time, as a duration (1d, 90m, 2 days 3 hours 2 minutes), rfc3339 timestamp, or UNIX timestamp."
      }
    },
    "templateUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/marvin-garcia/IoTEdgeLogging",
      "metadata": {
        "description": "GitHub repo URL."
      }
    },
    "branchName": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "GitHub repo branch name."
      }
    }
  },
  "variables": {
    "dpsName": "[concat('dps-', parameters('environmentHashId'))]",
    "iotHubOwnerPolicyName": "iothubowner",
    "edgeVmDnsName": "[concat(parameters('edgeVmName'), '-', parameters('environmentHashId'))]",
    "eventGridSubscriptionName": "[concat('iotedgemodulelogs', parameters('environmentHashId'))]",
    "eventGridSubscriptionFilter": "[concat('/blobServices/default/containers/', parameters('storageContainerName'), '/')]",
    "functionAppHostingPlanName": "[concat(parameters('functionAppName'), '-plan')]",
    "functionStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'function')]",
    "functionStorageAccountSku": "Standard_LRS",
    "appInsightsName": "[parameters('functionAppName')]",
    "workspaceId": "[resourceId(parameters('workspaceResourceGroup'), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
    "workspaceApiVersion": "[providers('microsoft.operationalinsights', 'workspaces').apiVersions[0]]",
    "iotHubDeploymentName": "[concat('iothub-', parameters('environmentHashId'))]",
    "eventGridDeploymentName": "[concat('storagesystemtopic-', parameters('environmentHashId'))]",
    "linkedDeploymentApiVersion": "2020-10-01"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('linkedDeploymentApiVersion')]",
      "name": "[variables('iotHubDeploymentName')]",
      "resourceGroup": "[parameters('iotHubResourceGroup')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/iothub-deploy.json')]"
        },
        "parameters": {
          "createIoTHub": {
            "value": "[parameters('createIoTHub')]"
          },
          "iotHubLocation": {
            "value": "[parameters('iotHubLocation')]"
          },
          "iotHubName": {
            "value": "[parameters('iotHubName')]"
          },
          "iotHubSku": {
            "value": "[parameters('iotHubSku')]"
          },
          "iotHubTier": {
            "value": "[parameters('iotHubTier')]"
          },
          "iotHubCapacity": {
            "value": "[parameters('iotHubCapacity')]"
          },
          "iotHubRetentionInDays": {
            "value": "[parameters('iotHubRetentionInDays')]"
          },
          "iotHubPartitionCount": {
            "value": "[parameters('iotHubPartitionCount')]"
          },
          "iotHubOwnerPolicyName": {
            "value": "[variables('iotHubOwnerPolicyName')]"
          },
          "iotHubServicePolicyName": {
            "value": "[parameters('iotHubServicePolicyName')]"
          },
          "dpsName": {
            "value": "[variables('dpsName')]"
          },
          "dpsSku": {
            "value": "[parameters('dpsSku')]"
          },
          "dpsCapacity": {
            "value": "[parameters('dpsCapacity')]"
          },
          "dpsLocation": {
            "value": "[parameters('dpsLocation')]"
          },
          "edgeVmName": {
            "value": "[parameters('edgeVmName')]"
          },
          "edgeVmDnsName": {
            "value": "[variables('edgeVmDnsName')]"
          },
          "edgeVmSize": {
            "value": "[parameters('edgeVmSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "edgeSubnetName": {
            "value": "[parameters('edgeSubnetName')]"
          },
          "edgeSubnetAddressRange": {
            "value": "[parameters('edgeSubnetAddressRange')]"
          },
          "templateUrl": {
            "value": "[parameters('templateUrl')]"
          },
          "branchName": {
            "value": "[parameters('branchName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('linkedDeploymentApiVersion')]",
      "name": "[variables('eventGridDeploymentName')]",
      "resourceGroup": "[parameters('storageAccountResourceGroup')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/storage-deploy.json')]"
        },
        "parameters": {
          "createStorageAccount": {
            "value": "[parameters('createStorageAccount')]"
          },
          "storageAccountLocation": {
            "value": "[parameters('storageAccountLocation')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "storageAccountSku": {
            "value": "[parameters('storageAccountSku')]"
          },
          "storageContainerName": {
            "value": "[parameters('storageContainerName')]"
          },
          "storageQueueName": {
            "value": "[parameters('storageQueueName')]"
          },
          "createEventGridSystemTopic": {
            "value": "[parameters('createEventGridSystemTopic')]"
          },
          "eventGridSystemTopicName": {
            "value": "[parameters('eventGridSystemTopicName')]"
          },
          "eventGridSubscriptionName": {
            "value": "[variables('eventGridSubscriptionName')]"
          },
          "eventGridSubscriptionFilter": {
            "value": "[variables('eventGridSubscriptionFilter')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('linkedDeploymentApiVersion')]",
      "condition": "[parameters('createWorkspace')]",
      "type": "microsoft.operationalinsights/workspaces",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('workspaceLocation')]",
      "properties": {
        "sku": {
          "name": "[parameters('workspaceSku')]"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionStorageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[variables('functionStorageAccountSku')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionAppHostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[variables('functionAppHostingPlanName')]",
        "computeMode": "Dynamic"
      }
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('appInsightsName')))]": "Resource"
      },
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', parameters('workspaceName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('functionAppHostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName'))]",
        "[resourceId('microsoft.insights/components', variables('appInsightsName'))]",
        "[variables('iotHubDeploymentName')]",
        "[variables('eventGridDeploymentName')]"
      ],
      "properties": {
        "name": "[parameters('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionAppHostingPlanName'))]",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').connectionString]"
            },
            {
              "name": "StorageConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', reference(variables('eventGridDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.storageAccountKey.value, ';')]"
            },
            {
              "name": "QueueName",
              "value": "[parameters('storageQueueName')]"
            },
            {
              "name": "ContainerName",
              "value": "[parameters('storageContainerName')]"
            },
            {
              "name": "DeviceQuery",
              "value": "[parameters('deviceQuery')]"
            },
            {
              "name": "HubConnectionString",
              "value": "[concat('HostName=', reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.iotHubHostname.value, ';SharedAccessKeyName=', parameters('iotHubServicePolicyName'), ';SharedAccessKey=', reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.iotHubServiceKey.value)]"
            },
            {
              "name": "HubResourceId",
              "value": "[reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.iotHubResourceId.value]"
            },
            {
              "name": "LogsContentType",
              "value": "json"
            },
            {
              "name": "LogsEncoding",
              "value": "none"
            },
            {
              "name": "LogsMaxSizeMB",
              "value": "28"
            },
            {
              "name": "LogsIdRegex",
              "value": "[parameters('moduleIdRegex')]"
            },
            {
              "name": "LogsRegex",
              "value": "[parameters('logsRegex')]"
            },
            {
              "name": "LogsSince",
              "value": "[parameters('logsSince')]"
            },
            {
              "name": "LogType",
              "value": "[parameters('logsType')]"
            },
            {
              "name": "WorkspaceApiVersion",
              "value": "2016-04-01"
            },
            {
              "name": "WorkspaceId",
              "value": "[reference(variables('workspaceId'), variables('workspaceApiVersion')).customerId]"
            },
            {
              "name": "WorkspaceKey",
              "value": "[listKeys(variables('workspaceId'), variables('workspaceApiVersion')).primarySharedKey]"
            }
          ]
        }
      },
      "resources": []
    }
  ],
  "outputs": {
    "iotHubResourceId": {
      "type": "string",
      "value": "[reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.iotHubResourceId.value]"
    },
    "workspaceId": {
      "type": "string",
      "value": "[reference(variables('workspaceId'), variables('workspaceApiVersion')).customerId]"
    },
    "workspaceSharedKey": {
      "type": "string",
      "value": "[listKeys(variables('workspaceId'), variables('workspaceApiVersion')).primarySharedKey]"
    }
  }
}